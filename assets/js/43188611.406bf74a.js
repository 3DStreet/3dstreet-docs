"use strict";(self.webpackChunk_3dstreet_docs=self.webpackChunk_3dstreet_docs||[]).push([[6347],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(t.Provider,{value:n},e.children)}},46030:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"managed-street/managed-street-json-format","title":"Managed Street JSON Format","description":"This document describes the JSON format for defining streets in the 3DStreet system. Third parties can use this format to create compatible street definitions.","source":"@site/docs/managed-street/managed-street-json-format.md","sourceDirName":"managed-street","slug":"/managed-street/managed-street-json-format","permalink":"/docs/managed-street/managed-street-json-format","draft":false,"unlisted":false,"editUrl":"https://github.com/3dstreet/3dstreet-docs/tree/main/docs/managed-street/managed-street-json-format.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"street-segment Component","permalink":"/docs/managed-street/component-street-segment"},"next":{"title":"Model Name List","permalink":"/docs/managed-street/model-shortname-list"}}');var r=s(74848),t=s(28453);const d={sidebar_position:4},l="Managed Street JSON Format",a={},c=[{value:"Top-Level Structure",id:"top-level-structure",level:2},{value:"Segment Structure",id:"segment-structure",level:2},{value:"Segment Types",id:"segment-types",level:3},{value:"Surface Types",id:"surface-types",level:3},{value:"Direction Options",id:"direction-options",level:3},{value:"Generated Content",id:"generated-content",level:2},{value:"Clones",id:"clones",level:3},{value:"Stencils",id:"stencils",level:3},{value:"Pedestrians",id:"pedestrians",level:3},{value:"Striping",id:"striping",level:3},{value:"Example Segments",id:"example-segments",level:2},{value:"Basic Drive Lane",id:"basic-drive-lane",level:3},{value:"Sidewalk with Trees",id:"sidewalk-with-trees",level:3},{value:"Managed Street JSON Examples",id:"managed-street-json-examples",level:2},{value:"Notes",id:"notes",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"managed-street-json-format",children:"Managed Street JSON Format"})}),"\n",(0,r.jsx)(n.p,{children:"This document describes the JSON format for defining streets in the 3DStreet system. Third parties can use this format to create compatible street definitions."}),"\n",(0,r.jsx)(n.h2,{id:"top-level-structure",children:"Top-Level Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"{\n  name: string,           // Name of the street configuration\n  width: number,          // Total width in meters\n  length: number,         // Length of street in meters\n  segments: Segment[]     // Array of segment definitions\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"segment-structure",children:"Segment Structure"}),"\n",(0,r.jsx)(n.p,{children:"Each segment represents a distinct part of the street and is defined as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"{\n  name: string,          // Display name of the segment\n  type: SegmentType,     // Type of segment\n  surface: SurfaceType,  // Surface material\n  color: string,         // Hex color code\n  level: number,         // Vertical offset (-1, 0, 1, 2)\n  width: number,         // Width in meters\n  direction: Direction,  // Traffic direction\n  generated: Generated   // Optional generated content\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"segment-types",children:"Segment Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"drive-lane"}),": Standard driving lane"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bus-lane"}),": Dedicated bus lane"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bike-lane"}),": Dedicated bicycle lane"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sidewalk"}),": Pedestrian walkway"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parking-lane"}),": Parking area"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"divider"}),": Street divider/median"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"grass"}),": Grass area"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rail"}),": Railway track"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"surface-types",children:"Surface Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"asphalt"}),": Standard road surface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"concrete"}),": Concrete surface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"grass"}),": Grass surface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sidewalk"}),": Sidewalk texture"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"gravel"}),": Gravel surface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sand"}),": Sandy surface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hatched"}),": Hatched pattern"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"planting-strip"}),": Planted area"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"none"}),": No surface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"solid"}),": Solid color surface"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"direction-options",children:"Direction Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"none"}),": No direction (for sidewalks, dividers)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inbound"}),": Traffic flowing inward"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"outbound"}),": Traffic flowing outward"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"generated-content",children:"Generated Content"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"generated"})," object can contain multiple types of generated content:"]}),"\n",(0,r.jsx)(n.h3,{id:"clones",children:"Clones"}),"\n",(0,r.jsx)(n.p,{children:"Generates repeated 3D models along the segment."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'clones: [{\n  mode: "random" | "fixed" | "single",\n  modelsArray: string,     // Comma-separated list of model names\n  spacing: number,         // Distance between models in meters\n  count?: number,          // Number of models (for random mode)\n  facing?: number,         // Rotation in degrees\n  randomFacing?: boolean,  // Random rotation\n  cycleOffset?: number,    // Offset in the repeating pattern (0-1)\n}]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Common model arrays:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Vehicles: ",(0,r.jsx)(n.code,{children:'"sedan-rig, box-truck-rig, self-driving-waymo-car, suv-rig, motorbike"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Buses: ",(0,r.jsx)(n.code,{children:'"bus"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Cyclists: ",(0,r.jsx)(n.code,{children:'"cyclist-cargo, cyclist1, cyclist2, cyclist3, cyclist-dutch, cyclist-kid, ElectricScooter_1"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Static: ",(0,r.jsx)(n.code,{children:'"tree3, lamp-modern, flowers1"'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"stencils",children:"Stencils"}),"\n",(0,r.jsx)(n.p,{children:"Adds road markings and symbols."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"stencil: [{\n  modelsArray: string,    // Stencil model names\n  spacing: number,        // Distance between stencils\n  padding?: number,       // Edge padding\n  cycleOffset?: number,   // Pattern offset (0-1)\n  direction?: Direction,  // Stencil orientation\n  stencilHeight?: number // Height of stencil\n}]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Stencil Types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Arrows: ",(0,r.jsx)(n.code,{children:'"left, right, both, straight, left-straight, right-straight, all"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Parking: ",(0,r.jsx)(n.code,{children:'"parking-t, perpendicular-stalls, solid-stripe"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Word stencils: ",(0,r.jsx)(n.code,{children:'"word-only, word-taxi, word-bus, word-lane, word-only-small, word-yield, word-slow, word-xing, word-stop, word-loading-small"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Other: ",(0,r.jsx)(n.code,{children:'"sharrow, bike-arrow, hash-left, hash-right, hash-chevron"'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pedestrians",children:"Pedestrians"}),"\n",(0,r.jsx)(n.p,{children:"Adds pedestrian models with specified density."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'pedestrians: [{\n  density: "normal" | "dense"\n}]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"striping",children:"Striping"}),"\n",(0,r.jsx)(n.p,{children:"Adds road stripes and lane markings."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'striping: [{\n  striping: string,       // Stripe pattern type\n  side?: "left" | "right" // Side of segment\n}]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Striping Types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"none"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"solid-stripe"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"dashed-stripe"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"short-dashed-stripe"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"short-dashed-stripe-yellow"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"solid-doubleyellow"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"solid-dashed"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"solid-dashed-yellow"'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'"solid-dashed-yellow-mirror"'})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-segments",children:"Example Segments"}),"\n",(0,r.jsx)(n.h3,{id:"basic-drive-lane",children:"Basic Drive Lane"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  name: "Drive Lane",\n  type: "drive-lane",\n  surface: "asphalt",\n  color: "#ffffff",\n  level: 0,\n  width: 3.048,\n  direction: "inbound",\n  generated: {\n    clones: [{\n      mode: "random",\n      modelsArray: "sedan-rig, box-truck-rig, self-driving-waymo-car, suv-rig, motorbike",\n      spacing: 7.3,\n      count: 4\n    }]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sidewalk-with-trees",children:"Sidewalk with Trees"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'{\n  name: "Tree Planting Strip",\n  type: "sidewalk",\n  surface: "sidewalk",\n  color: "#ffffff",\n  level: 1,\n  width: 0.914,\n  direction: "none",\n  generated: {\n    clones: [{\n      mode: "fixed",\n      modelsArray: "tree3",\n      spacing: 15\n    }]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"managed-street-json-examples",children:"Managed Street JSON Examples"}),"\n",(0,r.jsx)(n.p,{children:"These are the default street definitions in Managed Street JSON used in the 3DStreet Editor Add Layer Panel."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/3DStreet/3dstreet/blob/main/src/editor/components/components/AddLayerPanel/defaultStreets.js",children:"https://github.com/3DStreet/3dstreet/blob/main/src/editor/components/components/AddLayerPanel/defaultStreets.js"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All measurements should be in meters"}),"\n",(0,r.jsx)(n.li,{children:'Colors should be in hex format (e.g., "#ffffff")'}),"\n",(0,r.jsx)(n.li,{children:"Level values represent curb heights: -1 (below grade), 0 (at grade), 1 (curb height), 2 (elevated)"}),"\n",(0,r.jsx)(n.li,{children:"When using random mode for clones, both spacing and count should be specified"}),"\n",(0,r.jsx)(n.li,{children:"For fixed mode clones, only spacing is required"}),"\n",(0,r.jsx)(n.li,{children:"Cyclic offsets should be between 0 and 1, representing percentage of pattern offset"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);